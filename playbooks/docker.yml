---
- name: Install Docker
  hosts: wsl
  vars:
    DOCKER_PACKAGES:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
    USER: "docker"

  tasks:
    - name: Install packages needed for Docker
      become: "yes"
      apt:
        name: "{{ DOCKER_PACKAGES }}"
        state: present
        update_cache: "yes"

    - name: Add Docker GPG apt Key
      become: "yes"
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Save the current Ubuntu release version into a variable
      shell: lsb_release -cs
      register: ubuntu_version

    - name: Add Docker Repository
      become: "yes"
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ubuntu_version.stdout }} stable"
        state: present

    - name: Install Docker
      become: "yes"
      apt:
        name: "docker-ce"
        update_cache: "yes"
        state: present

    - name: Create docker group
      become: "yes"
      group:
        name: "docker"
        state: present

    - name: Adding user '{{ USER }}' to docker group
      become: "yes"
      user:
        name: "{{ USER }}"
        groups: "docker"
        append: "yes"

    - name: Start Docker
      become: "yes"
      become_user: "docker"
      service:
        name: "docker"
        state: started

    - name: Test Docker with hello world example
      become: "yes"
      become_user: "docker"
      shell: "docker run hello-world"
      register: hello_world_output

    - name: Show output of hello word example
      debug:
        msg: "Container Output: {{hello_world_output.stdout}}"

    - name: install python dependencies
      become: "yes"
      apt:
        update_cache: yes
        state: latest
        name: python3-pip

    - name: install 'Docker SDK for Python'
      pip:
        executable: /usr/bin/pip3
        name: docker

    - name: Reboot server in order for changes to take place
      shell: "sleep 1 && reboot"
      async: 1
      poll: 0

- name: Run server
  hosts: wsl
  remote_user: root
  vars:
    DOCKERFILE: "./Dockerfile"

  tasks:
    - name: Build image
      delegate_to: localhost
#      become: "yes"
      docker_image:
        name: hlds
        build:
          path: "{{ DOCKERFILE }}"
          pull: "no"
        source: build
      tags: build

    - name: Start container
      become: "yes"
      become_user: "docker"
      docker_container:
        name: hlds
        image: hlds
